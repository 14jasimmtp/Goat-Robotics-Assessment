// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/interface/projectIntf.go

// Package mock_interfaceRepo is a generated GoMock package.
package mock_interfaceRepo

import (
	reflect "reflect"

	models "github.com/14jasimmtp/Goat-Robotics-Assessment/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockProjectRepository) AddTask(task models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTask indicates an expected call of AddTask.
func (mr *MockProjectRepositoryMockRecorder) AddTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockProjectRepository)(nil).AddTask), task)
}

// CheckProjectExist mocks base method.
func (m *MockProjectRepository) CheckProjectExist(project models.Project) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProjectExist", project)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckProjectExist indicates an expected call of CheckProjectExist.
func (mr *MockProjectRepositoryMockRecorder) CheckProjectExist(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProjectExist", reflect.TypeOf((*MockProjectRepository)(nil).CheckProjectExist), project)
}

// CheckProjectExistByID mocks base method.
func (m *MockProjectRepository) CheckProjectExistByID(id, userID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProjectExistByID", id, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProjectExistByID indicates an expected call of CheckProjectExistByID.
func (mr *MockProjectRepositoryMockRecorder) CheckProjectExistByID(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProjectExistByID", reflect.TypeOf((*MockProjectRepository)(nil).CheckProjectExistByID), id, userID)
}

// CheckTaskExistByID mocks base method.
func (m *MockProjectRepository) CheckTaskExistByID(taskID string, userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTaskExistByID", taskID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTaskExistByID indicates an expected call of CheckTaskExistByID.
func (mr *MockProjectRepositoryMockRecorder) CheckTaskExistByID(taskID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTaskExistByID", reflect.TypeOf((*MockProjectRepository)(nil).CheckTaskExistByID), taskID, userID)
}

// CheckTaskExistInProject mocks base method.
func (m *MockProjectRepository) CheckTaskExistInProject(projectID uint, task string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTaskExistInProject", projectID, task)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTaskExistInProject indicates an expected call of CheckTaskExistInProject.
func (mr *MockProjectRepositoryMockRecorder) CheckTaskExistInProject(projectID, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTaskExistInProject", reflect.TypeOf((*MockProjectRepository)(nil).CheckTaskExistInProject), projectID, task)
}

// CreateProject mocks base method.
func (m *MockProjectRepository) CreateProject(project models.Project, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", project, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectRepositoryMockRecorder) CreateProject(project, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectRepository)(nil).CreateProject), project, userID)
}

// CreateTimeEntry mocks base method.
func (m *MockProjectRepository) CreateTimeEntry(timeEntry *models.TimeEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimeEntry", timeEntry)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTimeEntry indicates an expected call of CreateTimeEntry.
func (mr *MockProjectRepositoryMockRecorder) CreateTimeEntry(timeEntry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimeEntry", reflect.TypeOf((*MockProjectRepository)(nil).CreateTimeEntry), timeEntry)
}

// DeleteTask mocks base method.
func (m *MockProjectRepository) DeleteTask(taskID string, userid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", taskID, userid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockProjectRepositoryMockRecorder) DeleteTask(taskID, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockProjectRepository)(nil).DeleteTask), taskID, userid)
}

// DeleteTimeEntry mocks base method.
func (m *MockProjectRepository) DeleteTimeEntry(id string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimeEntry", id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTimeEntry indicates an expected call of DeleteTimeEntry.
func (mr *MockProjectRepositoryMockRecorder) DeleteTimeEntry(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimeEntry", reflect.TypeOf((*MockProjectRepository)(nil).DeleteTimeEntry), id, userID)
}

// GetAll mocks base method.
func (m *MockProjectRepository) GetAll() ([]models.TimeEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.TimeEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProjectRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProjectRepository)(nil).GetAll))
}

// GetByIDTimeEntry mocks base method.
func (m *MockProjectRepository) GetByIDTimeEntry(id uint) (*models.TimeEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDTimeEntry", id)
	ret0, _ := ret[0].(*models.TimeEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDTimeEntry indicates an expected call of GetByIDTimeEntry.
func (mr *MockProjectRepositoryMockRecorder) GetByIDTimeEntry(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDTimeEntry", reflect.TypeOf((*MockProjectRepository)(nil).GetByIDTimeEntry), id)
}

// ListProjects mocks base method.
func (m *MockProjectRepository) ListProjects(userID int) ([]models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", userID)
	ret0, _ := ret[0].([]models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockProjectRepositoryMockRecorder) ListProjects(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockProjectRepository)(nil).ListProjects), userID)
}

// UpdateProject mocks base method.
func (m *MockProjectRepository) UpdateProject(project models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", project)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectRepositoryMockRecorder) UpdateProject(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectRepository)(nil).UpdateProject), project)
}

// UpdateTimeEntry mocks base method.
func (m *MockProjectRepository) UpdateTimeEntry(timeEntry *models.TimeEntry, UserID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimeEntry", timeEntry, UserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTimeEntry indicates an expected call of UpdateTimeEntry.
func (mr *MockProjectRepositoryMockRecorder) UpdateTimeEntry(timeEntry, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimeEntry", reflect.TypeOf((*MockProjectRepository)(nil).UpdateTimeEntry), timeEntry, UserID)
}
