// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/interface/repoIntf.go

// Package mock_interfaceRepo is a generated GoMock package.
package mock_interfaceRepo

import (
	reflect "reflect"

	db "github.com/14jasimmtp/Goat-Robotics-Assessment/pkg/db"
	models "github.com/14jasimmtp/Goat-Robotics-Assessment/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthInterface is a mock of AuthInterface interface.
type MockAuthInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthInterfaceMockRecorder
}

// MockAuthInterfaceMockRecorder is the mock recorder for MockAuthInterface.
type MockAuthInterfaceMockRecorder struct {
	mock *MockAuthInterface
}

// NewMockAuthInterface creates a new mock instance.
func NewMockAuthInterface(ctrl *gomock.Controller) *MockAuthInterface {
	mock := &MockAuthInterface{ctrl: ctrl}
	mock.recorder = &MockAuthInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthInterface) EXPECT() *MockAuthInterfaceMockRecorder {
	return m.recorder
}

// FetchUserByEmail mocks base method.
func (m *MockAuthInterface) FetchUserByEmail(email string) (*db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByEmail", email)
	ret0, _ := ret[0].(*db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByEmail indicates an expected call of FetchUserByEmail.
func (mr *MockAuthInterfaceMockRecorder) FetchUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByEmail", reflect.TypeOf((*MockAuthInterface)(nil).FetchUserByEmail), email)
}

// SaveUser mocks base method.
func (m *MockAuthInterface) SaveUser(user models.Register, Password string) (*db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", user, Password)
	ret0, _ := ret[0].(*db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockAuthInterfaceMockRecorder) SaveUser(user, Password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockAuthInterface)(nil).SaveUser), user, Password)
}
