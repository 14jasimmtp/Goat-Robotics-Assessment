// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/usecase/inteface/projectintf.go

// Package mock_interfaceUsecase is a generated GoMock package.
package mock_interfaceUsecase

import (
	reflect "reflect"

	models "github.com/14jasimmtp/Goat-Robotics-Assessment/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockProjectUsecase is a mock of ProjectUsecase interface.
type MockProjectUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProjectUsecaseMockRecorder
}

// MockProjectUsecaseMockRecorder is the mock recorder for MockProjectUsecase.
type MockProjectUsecaseMockRecorder struct {
	mock *MockProjectUsecase
}

// NewMockProjectUsecase creates a new mock instance.
func NewMockProjectUsecase(ctrl *gomock.Controller) *MockProjectUsecase {
	mock := &MockProjectUsecase{ctrl: ctrl}
	mock.recorder = &MockProjectUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectUsecase) EXPECT() *MockProjectUsecaseMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockProjectUsecase) AddTask(task models.Task, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", task, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTask indicates an expected call of AddTask.
func (mr *MockProjectUsecaseMockRecorder) AddTask(task, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockProjectUsecase)(nil).AddTask), task, userID)
}

// AddTimeEntry mocks base method.
func (m *MockProjectUsecase) AddTimeEntry(timeEntry *models.TimeEntry, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTimeEntry", timeEntry, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTimeEntry indicates an expected call of AddTimeEntry.
func (mr *MockProjectUsecaseMockRecorder) AddTimeEntry(timeEntry, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTimeEntry", reflect.TypeOf((*MockProjectUsecase)(nil).AddTimeEntry), timeEntry, userID)
}

// CreateProject mocks base method.
func (m *MockProjectUsecase) CreateProject(project models.Project, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", project, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectUsecaseMockRecorder) CreateProject(project, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectUsecase)(nil).CreateProject), project, userID)
}

// CreateTimeEntry mocks base method.
func (m *MockProjectUsecase) CreateTimeEntry(timeEntry *models.TimeEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimeEntry", timeEntry)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTimeEntry indicates an expected call of CreateTimeEntry.
func (mr *MockProjectUsecaseMockRecorder) CreateTimeEntry(timeEntry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimeEntry", reflect.TypeOf((*MockProjectUsecase)(nil).CreateTimeEntry), timeEntry)
}

// DeleteTask mocks base method.
func (m *MockProjectUsecase) DeleteTask(taskID string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", taskID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockProjectUsecaseMockRecorder) DeleteTask(taskID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockProjectUsecase)(nil).DeleteTask), taskID, userID)
}

// DeleteTimeEntry mocks base method.
func (m *MockProjectUsecase) DeleteTimeEntry(id string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimeEntry", id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTimeEntry indicates an expected call of DeleteTimeEntry.
func (mr *MockProjectUsecaseMockRecorder) DeleteTimeEntry(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimeEntry", reflect.TypeOf((*MockProjectUsecase)(nil).DeleteTimeEntry), id, userID)
}

// GetTimeEntryByID mocks base method.
func (m *MockProjectUsecase) GetTimeEntryByID(id uint) (*models.TimeEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeEntryByID", id)
	ret0, _ := ret[0].(*models.TimeEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeEntryByID indicates an expected call of GetTimeEntryByID.
func (mr *MockProjectUsecaseMockRecorder) GetTimeEntryByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeEntryByID", reflect.TypeOf((*MockProjectUsecase)(nil).GetTimeEntryByID), id)
}

// ListProjects mocks base method.
func (m *MockProjectUsecase) ListProjects(userID int) ([]models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", userID)
	ret0, _ := ret[0].([]models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockProjectUsecaseMockRecorder) ListProjects(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockProjectUsecase)(nil).ListProjects), userID)
}

// UpdateTimeEntry mocks base method.
func (m *MockProjectUsecase) UpdateTimeEntry(timeEntry *models.TimeEntry, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimeEntry", timeEntry, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTimeEntry indicates an expected call of UpdateTimeEntry.
func (mr *MockProjectUsecaseMockRecorder) UpdateTimeEntry(timeEntry, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimeEntry", reflect.TypeOf((*MockProjectUsecase)(nil).UpdateTimeEntry), timeEntry, userID)
}
